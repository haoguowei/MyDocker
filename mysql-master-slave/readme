mysql 主从复制 master-slave

2.1 创建复制帐号

    在Master的数据库中建立一个备份帐户：每个slave使用标准的MySQL用户名和密码连接master。
    进行复制操作的用户会授予REPLICATION SLAVE权限。
    用户名的密码都会存储在文本文件master.info中。
    命令如下：

    mysql > grant replication slave,reload,super on *.* TO backup@'%' identified by '123456';

    建立一个帐户backup，并且只能允许从%地址上来登陆，密码是123456。

2.2 拷贝数据

    （假如是你完全新安装mysql主从服务器，这个一步就不需要。因为新安装的master和slave有相同的数据）
    关停Master服务器，将Master中的数据拷贝到B服务器中，使得Master和slave中的数据同步，并且确保在全部设置操作结束前，禁止在Master和slave服务器中进行写操作，使得两数据库中的数据一定要相同！

2.3 配置master

    接下来对master进行配置，包括打开二进制日志，指定唯一的servr ID。例如，在配置文件加入如下值：

    [mysqld]
    server-id=1 #为主服务器A的ID值
    log-bin=mysql-bin #二进制变更日志

    重启master，运行SHOW MASTER STATUS，输出如下：


2.4 配置slave

    Slave的配置与master类似，你同样需要重启slave的MySQL。如下：

    [mysqld]
    server-id=2 #必须，唯一
    log_bin=mysql-bin #二进制变更日志(非必要)
    relay-log=mysql-relay-bin #中继日志
    log_slave_updates=1 # 表示slave将复制事件写进自己的二进制日志
    read_only=1

    slave没有必要开启二进制日志，但是在一些情况下，必须设置，例如，如果slave为其它slave的master，必须设置bin_log。在这里，我们开启了二进制日志，而且显示的命名(默认名称为hostname，但是，如果hostname改变则会出现问题)。

2.5 启动slave

    接下来就是让slave连接master，并开始重做master二进制日志中的事件。你不应该用配置文件进行该操作，而应该使用CHANGE MASTER TO语句，该语句可以完全取代对配置文件的修改，而且它可以为slave指定不同的master，而不需要停止服务器。如下：

    mysql> change master to master_host='mysql-master',
        -> master_user='backup',
        -> master_password='123456',
        -> master_log_file='mysql-bin.000004', (master运行SHOW MASTER STATUS可查看到)
        -> master_log_pos=0;

    MASTER_LOG_POS的值为0，因为它是日志的开始位置。
    你可以用SHOW SLAVE STATUS语句查看slave的设置是否正确：

    mysql> show slave status\G;

    Slave_IO_State, Slave_IO_Running, 和Slave_SQL_Running是No
    表明slave还没有开始复制过程。日志的位置为4而不是0，这是因为0只是日志文件的开始位置，并不是日志位置。实际上，MySQL知道的第一个事件的位置是4。

    为了开始复制，你可以运行：
    mysql> START SLAVE;

    运行SHOW SLAVE STATUS查看输出结果：
    mysql> show slave status\G;

    在这里主要是看:
                       Slave_IO_Running=Yes
                       Slave_SQL_Running=Yes

    slave的I/O和SQL线程都已经开始运行，而且Seconds_Behind_Master不再是NULL。日志的位置增加了，意味着一些事件被获取并执行了。如果你在master上进行修改，你可以在slave上看到各种日志文件的位置的变化，同样，你也可以看到数据库中数据的变化。

    你可查看master和slave上线程的状态。
    在master上，你可以看到slave的I/O线程创建的连接：
    在master上输入show processlist\G;
    mysql> show processlist\G;
    *************************** 1. row ***************************
         Id: 1
       User: root
       Host: localhost
         db: app
    Command: Query
       Time: 0
      State: init
       Info: show processlist
    *************************** 2. row ***************************
         Id: 2
       User: backup
       Host: mysqls_mysql-slave_1.mysqls_default:43404
         db: NULL
    Command: Binlog Dump
       Time: 233
      State: Master has sent all binlog to slave; waiting for binlog to be updated
       Info: NULL

    2 rows in set (0.00 sec)
    行2为处理slave的I/O线程的连接。

    在slave服务器上运行：
    mysql> show processlist\G;
    *************************** 1. row ***************************
         Id: 2
       User: root
       Host: localhost
         db: app
    Command: Query
       Time: 0
      State: init
       Info: show processlist
    *************************** 2. row ***************************
         Id: 3
       User: system user
       Host:
         db: NULL
    Command: Connect
       Time: 317
      State: Waiting for master to send event
       Info: NULL
    *************************** 3. row ***************************
         Id: 4
       User: system user
       Host:
         db: NULL
    Command: Connect
       Time: 218
      State: Slave has read all relay log; waiting for the slave I/O thread to update it
       Info: NULL
    3 rows in set (0.00 sec)

    行1为I/O线程状态，行2为SQL线程状态。
